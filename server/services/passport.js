const passport = require('passport');
// Google authentication strategy for PassportJS
const GoogleStrategy = require('passport-google-oauth20').Strategy;
// register Google+ API https://console.developers.google.com
// Google API credentials
const mongoose = require('mongoose');
const keys = require('../config/keys');

// retrieve the users collection from MongoDB
const User = mongoose.model('users');

// used to serialize the user for the session
// user is the instance returned from done() function in passport.use
passport.serializeUser((user, done) => {
	// use the instance id property generated by MongoDB as a unique identifier
	// the reason we use MongoDB id is that we can then use multiple authentication providers
	done(null, user.id);
});

// used to deserialize the user
passport.deserializeUser((id, done) => {
	User.findById(id)
		.then((user) => {
			done(null, user);
		})
});


// handle OAuth using PassportJS
passport.use(
	// Google authentication
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback',
			proxy: true
		}, 
		// execute this verify callback when user profile is returned
		(accessToken, refreshToken, profile, done) => {
			// check if the user is already in database
			User.findOne({ googleId: profile.id })
				.then((existingUser) => {
					if (existingUser) {
						done(null, existingUser);
					} else {
						// create a new user in User collection
						new User({ googleId: profile.id }).save()
							.then((user) => {
								done(null, user);
							})
					}
				})
		}
	)
);